<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.alan.microservices.account.dao.SysUserMapper" >
  <resultMap id="BaseResultMap" type="com.alan.microservices.account.model.SysUser" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="created" property="created" jdbcType="TIMESTAMP" />
    <result column="updated" property="updated" jdbcType="TIMESTAMP" />
    <result column="avatar" property="avatar" jdbcType="VARCHAR" />
    <result column="organization" property="organization" jdbcType="VARCHAR" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from sys_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.alan.microservices.account.model.SysUser" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="BEFORE" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sys_user (id, username, `password`, 
      phone, email, created, 
      updated, avatar, organization
      )
    values (#{id,jdbcType=BIGINT}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{created,jdbcType=TIMESTAMP}, 
      #{updated,jdbcType=TIMESTAMP}, #{avatar,jdbcType=VARCHAR}, #{organization,jdbcType=VARCHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.alan.microservices.account.model.SysUser" >
    update sys_user
    set username = #{username,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      created = #{created,jdbcType=TIMESTAMP},
      updated = #{updated,jdbcType=TIMESTAMP},
      avatar = #{avatar,jdbcType=VARCHAR},
      organization = #{organization,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, username, `password`, phone, email, created, updated, avatar, organization
    from sys_user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, username, `password`, phone, email, created, updated, avatar, organization
    from sys_user
  </select>

  <select id="getPermsByUsername" resultType="java.lang.String" parameterType="java.lang.String">
    select sys_permission.enname
    from sys_user,sys_user_role,sys_role,sys_role_permission,sys_permission
    where sys_user.username = #{username}
    and sys_user.id=sys_user_role.user_id
    and sys_user_role.role_id=sys_role.id
    and sys_role.id=sys_role_permission.role_id
    and sys_role_permission.permission_id=sys_permission.id
  </select>
  <select id="getRolesByUsername" resultType="com.alan.microservices.account.model.SysRole" parameterType="java.lang.String">
    select sys_role.*
    from sys_user,sys_user_role,sys_role
    where sys_user.username = #{username}
    and sys_user.id=sys_user_role.user_id
    and sys_user_role.role_id=sys_role.id
  </select>

  <select id="getByUsername" resultType="com.alan.microservices.account.model.SysUser" parameterType="java.lang.String">
    select *
    from sys_user
    where sys_user.username = #{username}
  </select>
</mapper>